import '../use_case/applicants_use_case.dart';

/// Ejemplo de uso de los endpoints de hire y decline
class HireDeclineExample {
  final ApplicantsUseCase _applicantsUseCase = ApplicantsUseCase();

  /// Ejemplo de c√≥mo contratar un applicant
  Future<void> exampleHireApplicant() async {
    print('=== Ejemplo: Contratar Applicant ===');
    
    try {
      const applicationId = 'ab329a18-d216-4521-8365-75f0499b82cf';
      const startDate = '2025-10-01T00:00:00Z';
      const endDate = '2025-12-31T23:59:59Z';
      const reason = 'Excelente experiencia en construcci√≥n';
      
      print('üìã Datos de contrataci√≥n:');
      print('  - Application ID: $applicationId');
      print('  - Start Date: $startDate');
      print('  - End Date: $endDate');
      print('  - Reason: $reason');
      
      // Contratar applicant
      final result = await _applicantsUseCase.hireApplicant(
        applicationId: applicationId,
        startDate: startDate,
        endDate: endDate,
        reason: reason,
      );
      
      if (result.isSuccess && result.data != null) {
        final response = result.data!;
        print('‚úÖ Applicant contratado exitosamente:');
        print('  - Application ID: ${response.applicationId}');
        print('  - Hired: ${response.hired}');
        print('  - Assignment ID: ${response.assignmentId}');
        print('  - Message: ${response.message}');
        
        if (response.hasAssignmentId) {
          print('üéØ Assignment ID generado: ${response.assignmentId}');
        }
      } else {
        print('‚ùå Error contratando applicant: ${result.message}');
      }
    } catch (e) {
      print('‚ùå Excepci√≥n: $e');
    }
  }

  /// Ejemplo de c√≥mo rechazar un applicant
  Future<void> exampleDeclineApplicant() async {
    print('\n=== Ejemplo: Rechazar Applicant ===');
    
    try {
      const applicationId = '86dd1e80-4da5-4399-942a-ddec8484a86b';
      const reason = 'No cumple con los requisitos del puesto';
      
      print('üìã Datos de rechazo:');
      print('  - Application ID: $applicationId');
      print('  - Reason: $reason');
      
      // Rechazar applicant
      final result = await _applicantsUseCase.declineApplicant(
        applicationId: applicationId,
        reason: reason,
      );
      
      if (result.isSuccess && result.data != null) {
        final response = result.data!;
        print('‚úÖ Applicant rechazado exitosamente:');
        print('  - Application ID: ${response.applicationId}');
        print('  - Hired: ${response.hired}');
        print('  - Message: ${response.message}');
        
        if (response.isDeclined) {
          print('üö´ Applicant rechazado correctamente');
        }
      } else {
        print('‚ùå Error rechazando applicant: ${result.message}');
      }
    } catch (e) {
      print('‚ùå Excepci√≥n: $e');
    }
  }

  /// Ejemplo de validaci√≥n de fechas
  Future<void> exampleValidateDates() async {
    print('\n=== Ejemplo: Validaci√≥n de Fechas ===');
    
    try {
      const validStartDate = '2025-10-01T00:00:00Z';
      const validEndDate = '2025-12-31T23:59:59Z';
      const invalidStartDate = '2025-12-31T23:59:59Z';
      const invalidEndDate = '2025-10-01T00:00:00Z';
      
      print('üìÖ Validando fechas:');
      
      // Fechas v√°lidas
      final validDates = _applicantsUseCase.validateHireDates(validStartDate, validEndDate);
      print('  - Fechas v√°lidas ($validStartDate -> $validEndDate): $validDates');
      
      // Fechas inv√°lidas
      final invalidDates = _applicantsUseCase.validateHireDates(invalidStartDate, invalidEndDate);
      print('  - Fechas inv√°lidas ($invalidStartDate -> $invalidEndDate): $invalidDates');
      
      // Crear DTOs de decisi√≥n
      final hireDecision = _applicantsUseCase.createHireDecision(
        applicationId: 'test-id',
        startDate: validStartDate,
        endDate: validEndDate,
        reason: 'Test reason',
      );
      
      print('  - DTO v√°lido: ${hireDecision.isValid}');
      print('  - Errores de validaci√≥n: ${hireDecision.validationErrors}');
      
    } catch (e) {
      print('‚ùå Error: $e');
    }
  }

  /// Ejemplo de estad√≠sticas de decisiones
  Future<void> exampleDecisionStats() async {
    print('\n=== Ejemplo: Estad√≠sticas de Decisiones ===');
    
    try {
      const totalApplicants = 10;
      const hiredCount = 3;
      const declinedCount = 2;
      
      final stats = _applicantsUseCase.getDecisionStats(
        totalApplicants: totalApplicants,
        hiredCount: hiredCount,
        declinedCount: declinedCount,
      );
      
      print('üìä Estad√≠sticas de decisiones:');
      stats.forEach((key, value) {
        print('  - $key: $value');
      });
      
      print('\nüìà Resumen:');
      print('  - Total applicants: ${stats['totalApplicants']}');
      print('  - Contratados: ${stats['hiredCount']} (${stats['hireRate']}%)');
      print('  - Rechazados: ${stats['declinedCount']} (${stats['declineRate']}%)');
      print('  - Pendientes: ${stats['pendingCount']}');
      
    } catch (e) {
      print('‚ùå Error: $e');
    }
  }

  /// Ejemplo completo de flujo de decisi√≥n
  Future<void> exampleCompleteDecisionFlow() async {
    print('\n=== Ejemplo: Flujo Completo de Decisi√≥n ===');
    
    try {
      // Simular datos de applicants
      final applicants = [
        {'id': 'app1', 'name': 'Juan P√©rez', 'status': 'pending'},
        {'id': 'app2', 'name': 'Mar√≠a Garc√≠a', 'status': 'pending'},
        {'id': 'app3', 'name': 'Carlos L√≥pez', 'status': 'pending'},
      ];
      
      print('üë• Applicants iniciales:');
      for (final applicant in applicants) {
        print('  - ${applicant['name']} (${applicant['id']}): ${applicant['status']}');
      }
      
      // Contratar primer applicant
      print('\nüéØ Contratando primer applicant...');
      final hireResult = await _applicantsUseCase.hireApplicant(
        applicationId: 'app1',
        startDate: '2025-10-01T00:00:00Z',
        endDate: '2025-12-31T23:59:59Z',
        reason: 'Excelente experiencia',
      );
      
      if (hireResult.isSuccess) {
        print('‚úÖ Juan P√©rez contratado exitosamente');
        applicants[0]['status'] = 'hired';
      }
      
      // Rechazar segundo applicant
      print('\nüö´ Rechazando segundo applicant...');
      final declineResult = await _applicantsUseCase.declineApplicant(
        applicationId: 'app2',
        reason: 'No cumple requisitos',
      );
      
      if (declineResult.isSuccess) {
        print('‚úÖ Mar√≠a Garc√≠a rechazada exitosamente');
        applicants[1]['status'] = 'declined';
      }
      
      // Mostrar estado final
      print('\nüìã Estado final de applicants:');
      for (final applicant in applicants) {
        print('  - ${applicant['name']} (${applicant['id']}): ${applicant['status']}');
      }
      
      // Calcular estad√≠sticas
      final hiredCount = applicants.where((a) => a['status'] == 'hired').length;
      final declinedCount = applicants.where((a) => a['status'] == 'declined').length;
      
      final stats = _applicantsUseCase.getDecisionStats(
        totalApplicants: applicants.length,
        hiredCount: hiredCount,
        declinedCount: declinedCount,
      );
      
      print('\nüìä Estad√≠sticas finales:');
      print('  - Contratados: ${stats['hiredCount']} (${stats['hireRate']}%)');
      print('  - Rechazados: ${stats['declinedCount']} (${stats['declineRate']}%)');
      print('  - Pendientes: ${stats['pendingCount']}');
      
    } catch (e) {
      print('‚ùå Error en flujo completo: $e');
    }
  }
}
